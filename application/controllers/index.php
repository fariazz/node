<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Index extends CI_Controller {    private $_imageFileType = array(                'image/jpg',         'image/jpeg',         'image/png',     );         private $_inputValidation = array(        'email'             => '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i',                 // for the password change can you remove the capital letter and number restriction, and just set a minimum length of 8 characters.        //'pass'              => '/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).*$/',         'pass'              => '/^.{8,}$/i',                 'date'              => '/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/i',         'time'              => '/^[0-9]{2}:[0-9]{2}$/i',         'result'            => '/^[0-9]{1}:[0-9]{1}$/i',                 // new user form         'customer_ref_number'   => '/^.{1,}$/i',         'username'              => '/^[a-z0-9]+$/i',         'first_name'            => '/^.{1,}$/i',         'last_name'             => '/^.{1,}$/i',         //'company'               => '/^[a-z0-9]+$/i',         'phone'                 => '/^.{1,}$/i',         'registered_address'    => '/^.{1,}$/i',         'billing_address'       => '/^.{1,}$/i',         'password'              => '/^.{8,}$/i',         'password_again'        => '/^.{8,}$/i',     );         private $_inputValidationMessages = array(                'email'             => 'Please enter a valid email address',         'pass'              => 'Passwords must be of at least 8 characters',         'date'              => 'Incorrect date format. Example: 2012-04-24',         'time'              => 'Incorrect time format. Example: 14:30',         'result'            => 'Incorrect result format. Example: 6:4',                 // new user form         'customer_ref_number'   => 'Customer reference number cannot be empty',         'username'              => 'Usernames can only contain letters and numbers',         'first_name'            => 'First name cannot be empty',         'last_name'             => 'Last name cannot be empty',         //'company'               => 'company /^[a-z0-9]+$/i',         'phone'                 => 'Phone cannot be empty',         'registered_address'    => 'Registered address cannot be empty',         'billing_address'       => 'Billing address cannot be empty',         'password'              => 'Passwords must be of at least 8 characters',         'password_again'        => 'Passwords must be of at least 8 characters',     );     public function __construct() {                parent::__construct();         // get person from session         $this->_person = $this->session->userdata('user');         // show login screen to new user         if (empty($this->_person)) {            redirect(base_url().'auth');         }                // email not confirmed         if ($this->_person['active'] != 1) {            redirect(base_url().'emailNotValidated');         }    }        public function index() {                //printit($this->_person);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/index');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function clubShow($id) {                //printit($this->_person);                 $clubData = $this->club_model->getClubById($id);                 $countryList = $this->country_model->getCountryList();                 $playerList = $this->club_model->getClubPlayerList($id);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/clubShow');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('club_data', $clubData);         $this->view->set('player_list', $playerList);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        public function clubList() {                $clubList = $this->club_model->getClubList();                 $countryList = $this->country_model->getCountryList();                 $this->view->layout = 'template/main.php';         $content = new View('scripts/clubList');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('club_list', $clubList);                 $this->view->set('selected', $this->router->method);         $this->view->set('user', $this->_person);                 $this->view->render();    }        public function playerList() {                $post = $this->input->post();         $post = !empty($post) ? $this->input->post() : array();                 $userList = $this->user_model->getUserList($post);                 // collect statistic         $userListF = array();         if (!empty($userList)) { foreach ($userList as $item) {                         $userListF[$item['id']] = $item;             // game total             $userListF[$item['id']]['stat_games_played'] = $this->match_model->getGameCountForUser($item['id']);                         // game won             $userListF[$item['id']]['stat_games_won'] = $this->match_model->countWonMatchByUserId($item['id']);                         // set won             //$userListF[$item['id']]['stat_set_won'] = $this->match_model->getWonSetCountForUser($item['id']);                         // match won             $userListF[$item['id']]['stat_match_won'] = $this->match_model->getWonMatchCountForUser($item['id']);         } }         //printit($userListF);                 $countryList = $this->country_model->getCountryList();         //printit($countryList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/playerList');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);                 $this->view->set('user', $this->_person);         $this->view->set('post', $post);         $this->view->set('user_list', $userListF);         $this->view->set('player_strength', $this->_playerStrength);                 $this->view->render();    }        public function scheduledMatches() {                $gameList = $this->match_model->getUserScheduledGameList($this->_person['user_id']);         //printit($gameList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/scheduledMatches');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);         $this->view->set('game_list', $gameList);                 $this->view->render();    }        public function completedMatches() {                $gameList = $this->match_model->getCompletedPlayerGameList($this->_person['id']);         //printit($gameList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/completedMatches');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);         $this->view->set('game_list', $gameList);                 $this->view->render();    }        public function addResultList($error = '', $dataLine = '') {                $post = $this->input->post();         $result = unserialize(urldecode($dataLine));         //printit($result);                 $gameList = $this->match_model->getCompletedNoResultYetPlayerGameList($this->_person['id']);         //printit($gameList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/addResultList');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);         $this->view->set('game_list', $gameList);         $this->view->set('error', $error);         $this->view->set('post', $result);                 $this->view->render();    }        public function addResult($id = '') {                $game = $this->match_model->getGameById($id);         //printit($game); exit();                 if (!in_array($this->_person['id'], array($game['user_id1'], $game['user_id2']))) {                        echo 'error: you cannot did not play this game'; exit();         }        $post = $this->input->post();         if (!empty($post)) {                        $post['set1'] = "{$post['set1_p1']}:{$post['set1_p2']}";             $post['set2'] = "{$post['set2_p1']}:{$post['set2_p2']}";             $post['set3'] = "{$post['set3_p1']}:{$post['set3_p2']}";             // get winner id             $winnerPlayer = checkResult($post);             if ($winnerPlayer == 0) {                                // incorrect result                 $dataLine = urlencode(serialize($post));                 redirect("addResultList/1/$dataLine");             }            else {                                // set winner id                 $post['winner_id'] = $winnerPlayer == 1 ? $game['user_id1'] : $game['user_id2'];                 $this->match_model->addResult($this->_person['id'], $post);                 // get compatitor email                 $compatitorId = $game['user_id1'];                 if ($this->_person['id'] == $game['user_id1']) {                    $compatitorId = $game['user_id2'];                 }                // send email                 $compatitorData = $this->user_model->getUserById($compatitorId);                 $data = array(                    //'url'                   => base_url()."confirmResult/$id",                     'url'                   => base_url()."addResultList",                 );                 sendmail($compatitorData['email'], 6, $data);                 redirect("resultUpdated/{$game['id']}");             }        }                $this->view->layout = 'template/main.php';         $content = new View('scripts/addResult');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('game', $game);         $this->view->set('errors', $errors);         $this->view->set('post', $post);         $this->view->render();    }        public function confirmResult($id = '') {                $game = $this->match_model->getGameById($id);         //printit($game);                 if (!in_array($this->_person['id'], array($game['user_id1'], $game['user_id2']))) {                        echo 'error: you did not play this game'; exit();         }                if ($this->_person['id'] == $game['confirmed_result_user_id']) {                        echo 'error: you cannot confirm your result'; exit();         }                $winner = $this->user_model->getUserById($game['winner_id']);         //printit($winner);         $post = $this->input->post();                 if (!empty($post)) {                        $this->match_model->confirmResult($post['game_id']);                         // update statistic             updateMatchStatByUserId($game['user_id1'], $post['game_id']);             updateMatchStatByUserId($game['user_id2'], $post['game_id']);                     // update points in match for every user             $pointUser1 = calculateRankByMatch($game['user_id1'], $post['game_id']);             $pointUser2 = calculateRankByMatch($game['user_id2'], $post['game_id']);             $this->match_model->updateGame($post['game_id'], array('point_user1' => $pointUser1));             $this->match_model->updateGame($post['game_id'], array('point_user2' => $pointUser2));                         redirect("completedMatches");         }                $this->view->layout = 'template/main.php';         $content = new View('scripts/confirmResult');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('game', $game);         $this->view->set('winner', $winner);         $this->view->render();    }        public function scheduledTrainings() {        $trainingList = $this->training_model->getUserScheduledTrainingList($this->_person['user_id']);         //printit($trainingList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/scheduledTrainings');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);         $this->view->set('training_list', $trainingList);                 $this->view->render();    }        public function clubListMy() {                $clubList = $this->club_model->getClubListMy($this->_person['id']);                 $countryList = $this->country_model->getCountryList();                 $this->view->layout = 'template/main.php';         $content = new View('scripts/clubListMy');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('club_list', $clubList);                 $this->view->set('selected', $this->router->method);         $this->view->set('user', $this->_person);                 $this->view->render();    }        public function clubInUse() {                $this->view->layout = 'template/main.php';         $content = new View('scripts/clubInUse');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function clubDelete($userId, $clubId) {                // remove from db         $res = $this->club_model->clubDelete($userId, $clubId);                 if (!empty($res)) {                        redirect('clubInUse', 'redirect');         }                // remove image         @unlink(CLUB_IMAGE.DIRECTORY_SEPARATOR."$clubId.png");                 redirect('clubListMy', 'redirect');     }        public function clubEdit($id = 0) {                $post = $this->input->post();                 if (!empty($post)) {            $this->club_model->clubEdit($this->_person['id'], $post);                         // save image             if (!empty($_FILES) && is_uploaded_file($_FILES['profile_image']['tmp_name'])) {                                $destination = CLUB_IMAGE.DIRECTORY_SEPARATOR."{$post['id']}.png";                                 // remove old file                 if (file_exists($destination)) {                    unlink($destination);                 }                                move_uploaded_file($_FILES['profile_image']['tmp_name'], $destination);             }                        redirect('clubListMy', 'redirect');         }                $clubData = $this->club_model->getClubById($id);                 $countryList = $this->country_model->getCountryList();                 $this->view->layout = 'template/main.php';         $content = new View('scripts/clubEdit');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('club_data', $clubData);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        private function _updateSessionUser() {                $res = $this->user_model->getUserById($this->_person['id']);                 if (!empty($res)) {                        $this->session->set_userdata('user', $res);         }    }        public function showUser($id) {                $userData = $this->user_model->getUserById($id);         //printit($userData);                 $countryList = $this->country_model->getCountryList();         $this->view->layout = 'template/main.php';         $content = new View('scripts/showUser');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('user_data', $userData);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function cancelGame($id = 0) {                $post = $this->input->post();                 $gameInfo = $this->match_model->getGameById($id);         //printit($gameInfo); //exit();                 // is more than 48 hours left till start?         if ($gameInfo['second_left'] < SECOND_TILL_START_CAN_CANCEL_GAME) {                        $this->view->set('hide_submit', 1);         }                $user1Data = $this->user_model->getUserById($gameInfo['user_id1']);         $user2Data = $this->user_model->getUserById($gameInfo['user_id2']);                 if (!empty($post)) {                        // check if the user is related to game             if (!in_array($this->_person['id'], array($gameInfo['user_id1'], $gameInfo['user_id2']))) {                                echo 'error: you are not the user related to this game'; exit();             }                        //printit($post);             $post = clean($post);                         $data = array(                                'status'            => 'cancelled',                 'reason'            => $post['reason'],                 'reason_text'       => $post['reason_text'],             );             $this->match_model->updateGame($post['id'], $data);                         // send email             $data = array(                'url'           => base_url()."game/{$post['id']}",                 'reason'        => $post['reason'],                 'reason_text'   => $post['reason_text'],             );             sendmail($user1Data['email'], 5, $data);             sendmail($user2Data['email'], 5, $data);             redirect("scheduledMatches");         }                $countryList = $this->country_model->getCountryList();                 $this->view->layout = 'template/main.php';         $content = new View('scripts/cancelGame');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('post', $post);         $this->view->set('game_info', $gameInfo);                 $this->view->set('user1_data', $user1Data);         $this->view->set('user2_data', $user2Data);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function cancelTraining($id = 0) {                $post = $this->input->post();                 $trainingInfo = $this->training_model->getTrainingById($id);                 // is more than 48 hours left till start?         if ($trainingInfo['second_left'] < SECOND_TILL_START_CAN_CANCEL_TRAINING) {                        $this->view->set('hide_submit', 1);         }                $user1Data = $this->user_model->getUserById($trainingInfo['user_id1']);         $user2Data = $this->user_model->getUserById($trainingInfo['user_id2']);                 if (!empty($post)) {                        // check if the user is related to game             if (!in_array($this->_person['id'], array($trainingInfo['user_id1'], $trainingInfo['user_id2']))) {                                echo 'error: you are not the user related to this training'; exit();             }                        //printit($post);             $post = clean($post);                         $data = array(                                'status'            => 'cancelled',                 'reason'            => $post['reason'],                 'reason_text'       => $post['reason_text'],             );             $this->training_model->updateTraining($post['id'], $data);                         // send email             $data = array(                'url'           => base_url()."training/{$post['id']}",                 'reason'        => $post['reason'],                 'reason_text'   => $post['reason_text'],             );             sendmail($user1Data['email'], 5, $data);             sendmail($user2Data['email'], 5, $data);             redirect("scheduledTrainings");         }                $countryList = $this->country_model->getCountryList();                 $this->view->layout = 'template/main.php';         $content = new View('scripts/cancelTraining');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('post', $post);         $this->view->set('training_info', $trainingInfo);                 $this->view->set('user1_data', $user1Data);         $this->view->set('user2_data', $user2Data);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function challengeForGame($id = 0) {                $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {                        $post = clean($post);                         // validate regular fields             foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        // invite date / time cannot be in past            if ($post['date'] < date("Y-m-d")) {                                $errors[] = 'Date cannot be in past';             }                        if (empty($errors)) {                             // which user confirmed                 $post["confirmed_user1"] = '1';                 $gameId = $this->match_model->addGame($post);                 // send mail                 $compatitorData = $this->user_model->getUserById($post['user_id2']);                 $data = array(                    'creator'               => $this->_person['name'],                     'user_challanged'       => $compatitorData['name'],                     'url'                   => base_url()."game/$gameId",                     'date'                  => $post['date'],                     'time'                  => $post['time'],                     'location'              => $post['location'],                     'message_user1'         => isset($post['message_user1']) ? $post['message_user1'] : '',                     'message_user2'         => isset($post['message_user2']) ? $post['message_user2'] : '',                     'cancel_url'            => base_url()."cancelGame/$gameId",                 );                 sendmail($compatitorData['email'], 3, $data);                 redirect("gameUpdated/$id");             }        }                $userData = $this->user_model->getUserById($id);         //printit($userData);                 $countryList = $this->country_model->getCountryList();         $this->view->layout = 'template/main.php';         $content = new View('scripts/challengeForGame');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('user_data', $userData);         $this->view->set('post', $post);         $this->view->set('errors', $errors);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function challengeForTraining($id = 0) {                $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {                        $post = clean($post);                         foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        // invite date / time cannot be in past            if ($post['date'] < date("Y-m-d")) {                                $errors[] = 'Date cannot be in past';             }                        if (empty($errors)) {                             // which user confirmed                 $post["confirmed_user1"] = '1';                 $trainingId = $this->training_model->addTraining($post);                 // send mail                 $compatitorData = $this->user_model->getUserById($post['user_id2']);                 $data = array(                    'creator'                   => $this->_person['name'],                     'user_challanged'           => $compatitorData['name'],                     'url'                       => base_url()."training/$trainingId",                     'date'                      => $post['date'],                     'time'                      => $post['time'],                     'location'                  => $post['location'],                     'message_user1'             => isset($post['message_user1']) ? $post['message_user1'] : '',                     'message_user2'             => isset($post['message_user2']) ? $post['message_user2'] : '',                     'cancel_url'                => '',                 );                 sendmail($compatitorData['email'], 4, $data);                 redirect("trainingUpdated/$id");             }        }                $userData = $this->user_model->getUserById($id);         //printit($userData);                 $countryList = $this->country_model->getCountryList();         $this->view->layout = 'template/main.php';         $content = new View('scripts/challengeForTraining');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('user_data', $userData);         $this->view->set('post', $post);         $this->view->set('errors', $errors);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function gameUpdated() {                $this->view->layout = 'template/main.php';         $content = new View('scripts/game_updated');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function trainingUpdated() {                $this->view->layout = 'template/main.php';         $content = new View('scripts/training_updated');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function resultUpdated() {                $this->view->layout = 'template/main.php';         $content = new View('scripts/result_updated');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->render();    }        public function gameConfirm($id = 0) {                $errors = array();                 $post = $this->input->post();                 if (!empty($post)) {            $this->match_model->updateGame($id, $post);                         redirect("game/$id");         }    }        public function trainingConfirm($id = 0) {                $errors = array();                 $post = $this->input->post();                 if (!empty($post)) {            $this->training_model->updateTraining($id, $post);                         redirect("training/$id");         }    }        public function cancelled($id = 0) {                echo 'info about cancelled game / training'; exit();                 // $data =                 $this->view->layout = 'template/main.php';         $content = new View('scripts/game');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('data', $data);         $this->view->set('user', $this->_person);                 $this->view->render();    }        public function game($id = 0) {                $post = $this->input->post();                 $errors = array();                 $game = $this->match_model->getGameById($id);                 // was cancelled         if ($game['status'] == 'cancelled') {                        redirect("cancelled/{$game['id']}");         }                foreach ($this->_inputValidation as $key => $value) {            //if (empty($post[$key])) { continue; }            if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                $errors[] = $this->_inputValidationMessages[$key];             }        }                // invite date / time cannot be in past        if (isset($post['date']) && $post['date'] < date("Y-m-d")) {            $errors[] = 'Date cannot be in past';         }                    if (empty($errors)) {                         // check if game confirmed, then just show it             if ($game['confirmed_user1'] == '1' && $game['confirmed_user2'] == '1') {                redirect("gameConfirmed/$id");             }            // check if the user is one of them             if (!in_array($this->_person['id'], array($game['user_id1'], $game['user_id2']))) {                                 //printit($this->_person); printit($game);                 echo 'this user is not a player'; exit(); }                    if (!empty($post)) {                $post = clean($post);                 //printit($post);                 // get compatitor                 $compatitorId = $post['current_user'] == 1 ? 2 : 1;                 // clean confirm values                 $this->match_model->updateGame($id, array('confirmed_user1' => '0', 'confirmed_user2' => '0'));                 // which user confirmed                 $post["confirmed_user{$post['current_user']}"] = '1';                 unset($post['current_user']);                 $gameId = $this->match_model->updateGame($id, $post);                 // send email to compatitor                 $compatitorData = $this->user_model->getUserById($game["user_id$compatitorId"]);                 $data = array(                    'creator'               => '1',                     'user_challanged'       => $compatitorData['name'],                     'url'                   => base_url()."game/$id",                     'date'                  => $post['date'],                     'time'                  => $post['time'],                     'location'              => $post['location'],                     'message_user1'         => isset($post['message_user1']) ? $post['message_user1'] : '',                     'message_user2'         => isset($post['message_user2']) ? $post['message_user2'] : '',                     'cancel_url'            => base_url()."cancelGame/$id",                 );                 sendmail($compatitorData['email'], 3, $data);                 redirect("gameUpdated/$id");             }        }                // check which user now looking on this game         $viewerUserId = $this->_person['id'] == $game['user_id1'] ? 1 : 2;                 $userData1 = $this->user_model->getUserById($game['user_id1']);         $userData2 = $this->user_model->getUserById($game['user_id2']);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/game');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user_data1', $userData1);         $this->view->set('user_data2', $userData2);         $this->view->set('game', $game);         $this->view->set('viewer_user_id', $viewerUserId);                 $this->view->set('post', $post);         $this->view->set('errors', $errors);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        public function training($id = 0) {                $post = $this->input->post();         $errors = array();                 $training = $this->training_model->getTrainingById($id);                 if ($training['status'] == 'cancelled') {                        redirect("cancelled/{$training['id']}");         }                foreach ($this->_inputValidation as $key => $value) {            //if (empty($post[$key])) { continue; }            if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                $errors[] = $this->_inputValidationMessages[$key];             }        }                // invite date / time cannot be in past        if (isset($post['date']) && $post['date'] < date("Y-m-d")) {                        $errors[] = 'Date cannot be in past';         }                    if (empty($errors)) {                         // check if training confirmed, then just show it             if ($training['confirmed_user1'] == '1' && $training['confirmed_user2'] == '1') {                redirect("trainingConfirmed/$id");             }                        // check if the user is one of them             if (!in_array($this->_person['id'], array($training['user_id1'], $training['user_id2']))) { echo 'error: not related user'; exit(); }                    if (!empty($post)) {                $post = clean($post);                 //printit($post);                 // get compatitor                 $compatitorId = $post['current_user'] == 1 ? 2 : 1;                 // clean confirm values                 $this->training_model->updateTraining($id, array('confirmed_user1' => '0', 'confirmed_user2' => '0'));                 // which user confirmed                 $post["confirmed_user{$post['current_user']}"] = '1';                 unset($post['current_user']);                 $trainingId = $this->training_model->updateTraining($id, $post);                 // send email to compatitor                 $compatitorData = $this->user_model->getUserById($training["user_id$compatitorId"]);                 $data = array(                    'creator'               => '1',                     'user_challanged'       => $compatitorData['name'],                     'url'                   => base_url()."training/$id",                     'date'                  => $post['date'],                     'time'                  => $post['time'],                     'location'              => $post['location'],                     'message_user1'         => isset($post['message_user1']) ? $post['message_user1'] : '',                     'message_user2'         => isset($post['message_user2']) ? $post['message_user2'] : '',                     'cancel_url'            => '',                 );                 sendmail($compatitorData['email'], 4, $data);                 redirect("trainingUpdated/$id");             }        }                // check which user now looking on this training         $viewerUserId = $this->_person['id'] == $training['user_id1'] ? 1 : 2;                 $userData1 = $this->user_model->getUserById($training['user_id1']);         $userData2 = $this->user_model->getUserById($training['user_id2']);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/training');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user_data1', $userData1);         $this->view->set('user_data2', $userData2);         $this->view->set('training', $training);         $this->view->set('viewer_user_id', $viewerUserId);                 $this->view->set('post', $post);         $this->view->set('errors', $errors);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        public function gameConfirmed($id = 0) {                $game = $this->match_model->getGameById($id);                 // check if game confirmed, then just show it         if ($game['confirmed_user1'] != '1' || $game['confirmed_user2'] != '1') {                        redirect("game/$id");         }        $userData1 = $this->user_model->getUserById($game['user_id1']);         $userData2 = $this->user_model->getUserById($game['user_id2']);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/game_confirmed');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user_data1', $userData1);         $this->view->set('user_data2', $userData2);         $this->view->set('game', $game);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        public function trainingConfirmed($id = 0) {                $training = $this->training_model->getTrainingById($id);                 // check if training confirmed, then just show it         if ($training['confirmed_user1'] != '1' || $training['confirmed_user2'] != '1') {                        redirect("training/$id");         }        $userData1 = $this->user_model->getUserById($training['user_id1']);         $userData2 = $this->user_model->getUserById($training['user_id2']);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/training_confirmed');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user_data1', $userData1);         $this->view->set('user_data2', $userData2);         $this->view->set('training', $training);                 $this->view->set('user', $this->_person);                 $this->view->render();    }        public function profile($id = 0, $saved = '') {        $errors = array();                 $post = $this->input->post();                 if (!empty($post)) {                        //printit($post); exit();                         // save clubs             if (!empty($post['club'])) {                                 $this->club_model->saveUserClubs($this->_person['id'], $post['club']);             }                        unset($post['club']);             $this->user_model->updateUser($id, $post);                         // update user in session             $this->_updateSessionUser();                         // save image             if (!empty($_FILES) && is_uploaded_file($_FILES['profile_image']['tmp_name'])) {                                // get file type                 $fileType = explode("/", $_FILES['profile_image']['type']);                 $fileType = $fileType[0];                 if ($fileType != 'image') {                                        $errors[] = 'Profile picture file should be an image type';                 }                if (empty($errors)) {                                         $destination = PROFILE_IMAGE.DIRECTORY_SEPARATOR.$this->_person['id'].".png";                     // remove old file                     if (file_exists($destination)) {                        unlink($destination);                     }                    move_uploaded_file($_FILES['profile_image']['tmp_name'], $destination);                 }            }                        redirect(base_url()."profile/$id/saved");         }                $userData = $this->user_model->getUserById($id);         //printit($userData);                 $userClubList = $this->club_model->getUserClubList($id);         $userClubListF = array();         foreach ($userClubList as $item) {                        $userClubListF[$item['club_id']] = $item;         }        //printit($userClubListF);         $countryList = $this->country_model->getCountryList();         $clubList = $this->club_model->getClubList();         //printit($clubList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/profile');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('player_strength', $this->_playerStrength);         $this->view->set('country_list', $countryList);         $this->view->set('club_list', $clubList);         $this->view->set('club_list_user', $userClubListF);         $this->view->set('user_data', $userData);         $this->view->set('post', $post);         $this->view->set('saved', $saved);         $this->view->set('errors', $errors);         $this->view->set('user', $this->_person);                 $this->view->render();    }    // new     public function changePassword($changed = '') {        $post = $this->input->post();                 $errors = array();                 if (!empty($post)) {                        //printit($post); exit();                        $post['password'] = trim($post['password']);             $post['repassword'] = trim($post['repassword']);             $errors = array();                         if (empty($post['password']) || empty($post['repassword'])) {                                $errors[] = 'Password cannot be empty';             }            if ($post['password'] != $post['repassword']) {                                $errors[] = 'The passwords you have entered do not match';             }                        if (preg_match($this->_inputValidation['pass'], $post['password']) < 1) {                                    $errors[] = $this->_inputValidationMessages['pass'];             }                        if (empty($errors)) {                                $this->user_model->changePass($this->_person['id'], $post);                 redirect('changePassword/changed');             }        }                $this->view->layout = 'template/main.php';         $content = new View('scripts/changePassword');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('changed', $changed);         $this->view->set('errors', $errors);         $this->view->set('user', $this->_person);                 $this->view->render();    }        // new     public function clientAccount() {                $data = array(                        'user_type' => 'user.client',         );         $userClientList = $this->user_model->getUserList($data);         //printit($userClientList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/clientAccount');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('user_list', $userClientList);                 $this->view->render();    }        // new     public function requestorAccount() {                $post = $this->input->post();         //printit($post); exit();                 // get client list         $data = array(                        'user_type' => 'user.client',         );         $userClientList = $this->user_model->getUserList($data);         //printit($userClientList);                 // get requestor list         $data = array(                        'user_type' => 'user.requestor',             'client_id' => $post['client_id'],         );         $userRequestorList = intval($post['client_id']) > 0 ? $this->user_model->getUserList($data) : array();         //printit($userRequestorList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/requestorAccount');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('client_id', $post['client_id']);         $this->view->set('client_list', $userClientList);         $this->view->set('requestor_list', $userRequestorList);                 $this->view->render();    }    // new     public function newRequestor() {                $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {                        $post = clean($post);                         // validate regular fields             foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        if ($post['password'] != $post['password_again']) {                                $errors[] = 'Passwords does not match';             }                        if (intval($post['client_id']) < 1) {                                $errors[] = 'Client cannot be empty';             }                        if (empty($errors)) {                             $passMd5 = md5($post['password']);                 $data = array(                    'username'   => $post['username'],                     'first_name'   => $post['first_name'],                     'last_name'   => $post['last_name'],                     'phone'   => $post['phone'],                     'email'   => $post['email'],                     'password'   => $passMd5,                     'customer_color'   => $post['customer_color'],                     'user_type' => 'user.requestor',                     'client_id' => $post['client_id'],                 );                 $userId = $this->user_model->addUser($data);                 redirect("requestorAccount");             }        }                // get client list         $data = array(                        'user_type' => 'user.client',         );         $userClientList = $this->user_model->getUserList($data);         //printit($userClientList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/newRequestor');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('client_list', $userClientList);                 $this->view->set('errors', $errors);         $this->view->set('post', $post);                 $this->view->render();    }    // new     public function deleteClient($id) {                $this->user_model->deleteUserById($id);                 redirect("clientAccount");     }        // new     public function deleteRequestor($id) {                $this->user_model->deleteUserById($id);                 redirect("requestorAccount");     }        // new     public function editClient($id) {                $clientData = $this->user_model->getUserById($id);         //printit($clientData);                 $post = $this->input->post();                 $errors = array();         if (!empty($post)) {                        $post = clean($post);                         // validate regular fields             foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        if ($post['password'] != $post['password_again']) {                                $errors[] = 'Passwords does not match';             }                        if (empty($errors)) {                                 // image file validation                 if (!empty($_FILES) && is_uploaded_file($_FILES['logo']['tmp_name'])) {                     if (in_array($_FILES['logo']['type'], $this->_imageFileType)                         && intval($_FILES['logo']['size']) < 1024000) {                        $destination = CLUB_IMAGE.DIRECTORY_SEPARATOR."{$post['id']}.png";                         // remove old file                         if (file_exists($destination)) {                            unlink($destination);                         }                        move_uploaded_file($_FILES['logo']['tmp_name'], $destination);                     }                    else {                        $errors[] = 'Image file should be image type and size less then 1 Mb';                     }                }            }                        if (empty($errors)) {                             $passMd5 = md5($post['password']);                 $data = array(                    'customer_ref_number'   => $post['customer_ref_number'],                     'username'   => $post['username'],                     'first_name'   => $post['first_name'],                     'last_name'   => $post['last_name'],                     //'company'   => $post['company'],                     'phone'   => $post['phone'],                     'email'   => $post['email'],                     'registered_address'   => $post['registered_address'],                     'billing_address'   => $post['billing_address'],                     'password'   => $passMd5,                     'customer_color'   => $post['customer_color'],                 );                 $userId = $this->user_model->updateUser($id, $data);                 redirect("clientAccount");             }        }                $this->view->layout = 'template/main.php';         $content = new View('scripts/editClient');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('errors', $errors);         $this->view->set('post', $clientData);                 $this->view->render();    }        // new     public function editRequestor($id) {                $clientData = $this->user_model->getUserById($id);         //printit($clientData);                 $post = $this->input->post();                 $errors = array();         if (!empty($post)) {                        $post = clean($post);                         // validate regular fields             foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        if ($post['password'] != $post['password_again']) {                                $errors[] = 'Passwords does not match';             }                        if (intval($post['client_id']) < 1) {                                $errors[] = 'Client cannot be empty';             }                        if (empty($errors)) {                             $passMd5 = md5($post['password']);                 $data = array(                    'username'   => $post['username'],                     'first_name'   => $post['first_name'],                     'last_name'   => $post['last_name'],                     'phone'   => $post['phone'],                     'email'   => $post['email'],                     'password'   => $passMd5,                     'client_id' => $post['client_id'],                 );                 $userId = $this->user_model->updateUser($id, $data);                 redirect("requestorAccount");             }        }                // get client list         $data = array(                        'user_type' => 'user.client',         );         $userClientList = $this->user_model->getUserList($data);         //printit($userClientList);                 $this->view->layout = 'template/main.php';         $content = new View('scripts/editRequestor');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('client_list', $userClientList);         //$this->view->set('client_id', $id);         $this->view->set('errors', $errors);         $this->view->set('post', $clientData);                 $this->view->render();    }        // new     public function newClient() {                $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {                        $post = clean($post);                         // validate regular fields             foreach ($this->_inputValidation as $key => $value) {                //if (empty($post[$key])) { continue; }                if (isset($post[$key]) && preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        if ($post['password'] != $post['password_again']) {                                $errors[] = 'Passwords does not match';             }                        if (empty($errors)) {                                 // image file validation                 if (!empty($_FILES) && is_uploaded_file($_FILES['logo']['tmp_name'])) {                     if (in_array($_FILES['logo']['type'], $this->_imageFileType)                         && intval($_FILES['logo']['size']) < 1024000) {                        $destination = CLUB_IMAGE.DIRECTORY_SEPARATOR."{$post['id']}.png";                         // remove old file                         if (file_exists($destination)) {                            unlink($destination);                         }                        move_uploaded_file($_FILES['logo']['tmp_name'], $destination);                     }                    else {                        $errors[] = 'Image file should be image type and size less then 1 Mb';                     }                }            }                        if (empty($errors)) {                             $passMd5 = md5($post['password']);                 $data = array(                    'customer_ref_number'   => $post['customer_ref_number'],                     'username'   => $post['username'],                     'first_name'   => $post['first_name'],                     'last_name'   => $post['last_name'],                     //'company'   => $post['company'],                     'phone'   => $post['phone'],                     'email'   => $post['email'],                     'registered_address'   => $post['registered_address'],                     'billing_address'   => $post['billing_address'],                     'password'   => $passMd5,                     'customer_color'   => $post['customer_color'],                 );                 $userId = $this->user_model->addUser($data);                 redirect("clientAccount");             }        }                $this->view->layout = 'template/main.php';         $content = new View('scripts/newClient');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('user', $this->_person);                 $this->view->set('errors', $errors);         $this->view->set('post', $post);                 $this->view->render();    }    public function clubAdd() {        $post = $this->input->post();         if (!empty($post)) {                        $post['club_owner_id'] = $this->_person['id'];             $id = $this->club_model->clubAdd($post);                         // save image             if (!empty($_FILES) && is_uploaded_file($_FILES['profile_image']['tmp_name'])) {                                $destination = CLUB_IMAGE.DIRECTORY_SEPARATOR."$id.png";                                 // remove old file                 if (file_exists($destination)) {                    unlink($destination);                 }                                //echo $destination; exit();                 move_uploaded_file($_FILES['profile_image']['tmp_name'], $destination);             }                        redirect('clubListMy', 'redirect');         }                $countryList = $this->country_model->getCountryList();         $this->view->layout = 'template/main.php';         $content = new View('scripts/clubAdd');         $this->view->load('content', $content);                $menu = new View('scripts/menu');         $this->view->load('menu', $menu);        $content = new View('scripts/header');         $this->view->load('header', $content);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('country_list', $countryList);         $this->view->set('post', $post);         $this->view->set('user', $this->_person);                 $this->view->render();    }}