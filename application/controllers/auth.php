<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Auth extends CI_Controller {    public function __construct() {        parent::__construct();     }    private $_inputValidation = array(        'email'             => '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i',         'pass'              => '/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).*$/',     );         private $_inputValidationMessages = array(                'email'             => 'Email is not valid',         'pass'              => 'Password should contain at least one capital letter and one digit',     );         public function restorePassword($done = '') {                $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {            //printit($post);             $post['email'] = trim($post['email']);             if (empty($post['email'])) {                $errors['email'] = 'Email cannot be empty';             }            else if (preg_match(EMAIL_REGEXP_PATTERN, $post['email']) < 1) {                                    $errors['email'] = 'Email is not valid';             }            else {                                $res = $this->user_model->getUserByEmail($post['email']);                 if (empty($res)) {                                        $errors['email'] = 'Email not found';                 }            }            if (empty($errors)) {                                $trash = time() * time().microtime(TRUE).rand(0, 1000);                 $hash = md5($trash);                                 $emailHash = md5($post['email']);                                 // send email                 $vars = array(                    'link' => base_url()."setpass/$hash/$emailHash",                 );                 $res = sendmail($post['email'], 2, $vars);                 if ($res == FALSE) {                                        txtfile_error('error: email not sent', array($post));                 }                 else {                                        // set hash value to db                     $this->user_model->setHash($post['email'], $hash);                     redirect('restorePassword/done');                 }            }        }        $this->view->layout = 'template/auth.php';         $content = new View('scripts/header_auth');         $this->view->load('header', $content);        $content = new View('scripts/info');         $this->view->load('content', $content);        $loginBox = new View('scripts/restore_box');         $this->view->load('login_box', $loginBox);        $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('post', $post);         $this->view->set('done', $done);         $this->view->set('errors', $errors);                 $this->view->render();     }    private function _authorizeByFacebookId($id) {        $res = $this->user_model->getUserByFacebookId($id);         if (!empty($res)) {            $this->session->set_userdata('user', $res);             return 'logged';         }                return FALSE;     }        private function _authorizeByEmail($email) {        $res = $this->user_model->getUserByEmail($email);         if (!empty($res)) {            $this->session->set_userdata('user', $res);             return 'logged';         }                return FALSE;     }    private function _authorizeById($id) {        $res = $this->user_model->getUserById($id);         if (!empty($res)) {            $this->session->set_userdata('user', $res);             redirect('');         }    }    private function _authorize($login, $pass) {        $res = $this->auth_model->login($login, $pass);         if (!empty($res)) {            $this->session->set_userdata('user', $res);             redirect('');         }        return FALSE;     }        private function _restorePassword($login) {                $res = $this->auth_model->restorePassword($login, $pass);                 if (!empty($res)) {                        $this->session->set_userdata('user', $res);             redirect('');         }                return 'no';     }        public function email($email = '', $hash = '') {                if (!empty($email) && !empty($hash)) {                        $userData = $this->user_model->getUserById($email);             if ($userData['activation_hash'] == $hash) {                                $this->user_model->updateUser($userData['id'], array('active' => '1'));                 $this->_authorizeById($userData['id']);                 redirect('');             }        }    }    public function emailNotValidated() {                $this->session->set_userdata('user', '');                 $this->view->layout = 'template/auth.php';                 $content = new View('scripts/header_auth');         $this->view->load('header', $content);                $content = new View('scripts/info');         $this->view->load('content', $content);                $loginBox = new View('scripts/email_not_validated');         $this->view->load('login_box', $loginBox);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->render();     }    public function facebookLogin() {        $post = $this->input->post();         $post = $post['info'];                 // check if user exists         $user = $this->user_model->getUserByEmail($post['email']);                 if (empty($user)) {                        $dob = explode("/", $post['birthday']);             $part['year'] = array_pop($dob);             $part['day'] = array_pop($dob);             $part['month'] = array_pop($dob);             $dob = "{$part['year']}-{$part['month']}-{$part['day']}";                         // create facebook user             $data = array(                                'email'             => $post['email'],                 'facebook_id'       => $post['id'],                 'active'            => '1',                 'name'              => $post['name'],                 'date_created'      => date("Y-m-d H:i:s"),                 'gender'            => $post['gender'],                 'dob'               => $dob,                             );             $this->user_model->addUser($data);         }                // login user         $res = $this->_authorizeByEmail($post['email']);                 echo json_encode($res);         exit();     }    public function index() {        $post = $this->input->post();         //printit($post); exit();         $errors = array();         if (!empty($post)) {            $res = $this->_authorize($post['login'], $post['password']);             if ($res == FALSE) {                $errors[] = 'Email / password incorrect';             }        }        $this->view->layout = 'template/auth.php';         $content = new View('scripts/header_auth');         $this->view->load('header', $content);        $content = new View('scripts/info');         $this->view->load('content', $content);        $loginBox = new View('scripts/login_box');         $this->view->load('login_box', $loginBox);        $footer = new View('scripts/footer');         $this->view->load('footer', $footer);        $this->view->set('post', $post);         $this->view->set('errors', $errors);         $this->view->render();     }    public function register() {                $post = $this->input->post();                 $errors = array();                 if (!empty($post)) {                        if (empty($post['name'])) {                                $errors['name'] = 'Username cannot be empty';             }            else {                                $userExists = $this->user_model->getUserByName($post['name']);                 if (!empty($userExists)) {                                        $errors['user_exists'] = 'Username already registered';                 }            }                        if (empty($post['gender'])) {                                $errors['gender'] = 'Gender cannot be empty';             }                        if (empty($post['email'])) {                                $errors['email'] = 'Email cannot be empty';             }            else {                                $userExists = $this->user_model->getUserByEmail($post['email']);                 if (!empty($userExists)) {                                        $errors['email_exists'] = 'Email already registered';                 }            }                        if (empty($post['pass']) || empty($post['pass_retype'])) {                                $errors['password_empty'] = 'Password cannot be empty';             }                        if ($post['pass'] != $post['pass_retype']) {                                $errors['password_match'] = 'Passwords does not match';             }                        foreach ($this->_inputValidation as $key => $value) {                                if (preg_match($value, $post[$key]) < 1) {                                        $errors[] = $this->_inputValidationMessages[$key];                 }            }                        if (empty($errors)) {                                $dob = "{$post['year']}-{$post['month']}-{$post['day']}";                                 $activationHash = md5($post['email'].microtime());                 $data = array(                                        'name'              => $post['name'],                     'gender'            => $post['gender'],                     'dob'               => $dob,                     'email'             => $post['email'],                     'pass'              => md5($post['pass']),                     'date_created'      => date("Y-m-d H:i:s"),                     'activation_hash'   => "$activationHash",                 );                 $id = $this->user_model->addUser($data);                                 if (intval($id) > 0) {                                        $data = array(                        'base_url'              => base_url(),                         'id'                    => $id,                         'activation_hash'       => "$activationHash",                     );                     sendmail($post['email'], 1, $data);                     //echo 1; exit();                     $this->_authorizeById($id);                 }            }            else {                                $this->view->set('errors', $errors);             }        }                $this->view->layout = 'template/auth.php';                 $content = new View('scripts/header_auth');         $this->view->load('header', $content);                $content = new View('scripts/info');         $this->view->load('content', $content);                $loginBox = new View('scripts/register_box');         $this->view->load('login_box', $loginBox);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);                $this->view->set('post', $post);         $this->view->set('errors', $errors);                 $this->view->render();     }        public function logout() {               $this->session->set_userdata('user', '');         redirect('');     }        public function setpass($hash = '', $emailHash = '') {        $post = $this->input->post();                 $errors = array();                     if (!empty($post)) {                        $post['password'] = trim($post['password']);             $post['repassword'] = trim($post['repassword']);             if (empty($post['password']) || empty($post['repassword'])) {                                $errors[] = 'Password cannot be empty';             }            if ($post['password'] != $post['repassword']) {                                $errors[] = 'Passwords does not match';             }                        if (empty($errors)) {                                $this->user_model->changePassByHash($emailHash, $post);                 redirect('setpass/done');             }        }                $this->view->layout = 'template/auth.php';                 $content = new View('scripts/header_auth');         $this->view->load('header', $content);                $content = new View('scripts/info');         $this->view->load('content', $content);                $loginBox = new View('scripts/setpass');         $this->view->load('login_box', $loginBox);                $footer = new View('scripts/footer');         $this->view->load('footer', $footer);        $this->view->set('selected', $this->router->class);         $this->view->set('hash', $hash);         $this->view->set('email_hash', $emailHash);         $this->view->set('errors', $errors);         $this->view->render();         }}